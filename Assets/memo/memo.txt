공부해야 할것
윈도우 운영체제

가상함수
가상클래스
추상함수
추상클래스
상속
패턴
테이블
토글
FSM
PathNode
A* 알고리즘(길찾기 알고리즘)

array(배열)(동적으로 불가)

List(정렬화가 용이하다)(추가 삭제가 용이하다),

Dictionary

stack,
스택 영역에 데이터가 선입후출 방식- 컨텐츠에 주로 사용
ex.ui창 관리

Que(서버가 데이터를 처리하는 방식),
선입선출
ex.스킬과 같은 버튼(키패드)을 입력할때,input

-찾기가 쉽다
-해쉬 구조다
-키(고유값)와 쌍(데이터)으로 되어 있다
-데이터를 찾을때 렉이 덜 걸려서 용이 하다



Photon(멀티겜)
spine
데드게이트

레지스트리

규칙성 필수(코드나 깃허브 커밋 내용 등)

전략패턴
:추상함수,추상클래스,상속으로 만든것
포톤

잘 팔리는 장르-mmo
액션rpg
rpg

게임 상속 구조<-디폴트이니 공부필요
오브젝트------->외부 클래스로 연결
l    
액터(추상클래스
)------->외부 클래스로 연결
l
캐릭터charicter

하나의 클래스에 기능을 만들고 세분화 해서 나눠 주기만하자




리소시스 파일
프리팹

매니저 패턴
스크립트 파일 이름을 매니저를 사용하면 패턴(규칙성)으로 인식한다(회사에서)
1.이름이 매니저이다
2.데이터를 관리하는 매니저
3.데이터를 관리한다

캔버스 관련
캔버스-Render Mode-Camera(3d캐릭터를 사용가능)
캔버스 스캐일-screen size-화면 비율 맞추기
textmash Pro는 데이터를 많이 잡아먹어서 실사용을 하지 않는다
인벤토리의 아이템 같은 동적인 오브젝트는 프리팹화 하지만
UI같은 정적인 오브젝트는 그냥 고정한다


카메라 관련
컬링 마스크
:레이어 그룹을 통해 카메라에 비치는 오브젝트를 제한 할수 있다
<--카메라에 비치지 않을뿐 오브젝트는 존재하기 때문에 충돌 처리는 된다

멤버변수

어싱크
프리로드<--로딩씬에서 로딩하면서 프리팹 같은 사용할 데이터를 미리 로드한다

프로그래머로서 중요한것!

코드 작명법 예시 중요!!!!
VALUE<-- 유니티 에디터에 연결
Value<-- 유니티 에디터에 연결 ㄴㄴ
:이것 처럼 정해야 한다
헝가리안 표기법
:
카넬 표기법
:주로 서버에서 사용
ex.camelCase ,isCamelCase 
파스칼 표기법
:클라이언트(프로그래머)가 주로 사용
ex.CamelCase ,IsCamelCase
스네이크 표기법

폴더르 대분류에서 부터 소분류로 나눠야 한다

가상클래스

매니저:관리자
매니저 하고 ui는 상관 관계가 없기 때문에 ui매니저를 따로 만들어서 관리한다

슈퍼매니저는 매니저 패턴에 위배되서 잘 사용안한다

패턴
:상속과 밀접한 관계가 있다

전략패턴

struct와 클래스는 관계가 있다
============================================================
11/17
아틀라스
2D 이미지들(폴더로 묶을수도 있다)을 하나로 묶어서 메모리 사용량을 줄인다
텍스처 사이즈 1024~4096 으로 많이 한다(장비의 속도때문)

제네릭

알고리즘
asm
a*

폰트
프리타입 폰트


비디오 플레이어
랜더 타겟 텍스처

behaiviar(비헤이비어)<--검색

MonoBehaviour//유니티에서 할당하는 메모리를 사용하겠다
============================================================
12/1
패턴 종류(디자인 패턴)

순수 가상클래스
추상클래스
ex.abstract class ca

1)FSM

캐릭터에서 AI를 호출할 필요

2)전략패턴
ex.스킬
:우선적으로 순수 가상함수,클래스를 하나 생성
가상함수를 호출(구현부는  자식으로 이어 받는 클래스에서)

스트레이티지()
ex.플레이어 스킬(부모 클래스로 호출시 기능 불러오기)
:애니메이션 추가

3)팩토리 패턴

getAxis나 input을 사용할떄 플렛폼 별로 동작 방식이 다르니까 지역변수를 넣어서 
수정하기 편한 방식으로 작업해두어야 한다

애니메이션 동작은 int를 사용해야 한다(빠르니까)!!!
enom을 사용해서 호출한 방향으로 한다

4) 이터레이터패턴(c++)
:STL=List,Dictionary
주로 아이템에 사용한다
대응책으로 상속이 있다

상속관련 
actor를 호출하면 검색이 가능하다

for vs. foreach 차이
10배 정도 속도가 차이가 난다
foreach 쓰느곳
객체를 반환
인벤토리,스테이터스 창,컨텐츠 에서 주로 사용



버택스 셰이더
픽셀 셰이더


삼항연산자
:if(!변수),if(~)
상태패턴이랑 연관


웹 서버
:네이버,구글

tcpip
:동기화 하느 게임(mmo)
:C++

멀티 쓰레드