    public void jumpAttack()
    {
        if (jumpOn == false) { return; }
        if (groundCheck == true)//땅에 닿아 있을때
        {
            //mobRigid.useGravity = false;
        }
        if (targetCheack == false) 
        {
            targetOn(ref number);
            if (playerObj[number] == null)
            {
                return;
            }
            targetCheack = true;
            
        }

        // moveTime += Time.deltaTime;
        //jumpStart += Time.deltaTime;
        //Vector3 mPos = transform.position;
        //mPos.y = 0;
        //Vector3 tPos = playerObj[number].transform.position;
        //tPos.y = 0;


        //XZ 계산
        float xzSpeed = runningTime;
        Vector3 dir = (playerObj[number].transform.position - transform.position).normalized;
        dir.y = 0;
        float yForce = Mathf.Sqrt(2 * Physics.gravity.magnitude * jumpHight);
        //yForce = Mathf.Clamp(jumpHight ,0 , jumpHight);
        Debug.Log($"{yForce}");
        Vector3 jumpPos = dir * xzSpeed + Vector3.up * yForce;
        Debug.Log($"{jumpPos}");
        mobRigid.AddForce(jumpPos, ForceMode.VelocityChange);//점프
        //mobRigid.AddForce(jumpPos, ForceMode.Acceleration);//점프
        jumpOn = false;



        //float gavity = Mathf.Abs(Physics.gravity.y);//9.81~
        //float velocity = Mathf.Sqrt(2 * gavity * jump);
        //float timeToApex = velocity / gavity;
        //float totalTime = timeToApex*2;
        //Vector3 dd = Dir / totalTime;
        //mobRigid.velocity = new Vector3(dd.x, velocity, dd.z);
        //rigid.velocity = new Vector3(,velocity,)



        //Vector3 movePosXZ = Vector3.Lerp(mPos, tPos, time);
        //float movePosY = Mathf.Lerp(mPos.y, tPos.y, time);
        //float jumpPosY = Mathf.Sin(Mathf.PI * time) * jump;
        //float finalY = movePosY + jumpPosY;
        //Vector3 endTrs = new Vector3(movePosXZ.x, finalY, movePosXZ.z);
        //transform.position = endTrs;




        //if (moveTime >= runningTime)
        //{
        //    target = false;
        //    moveTime = 0.0f;
        //}
        //float hight = mPos.y - tPos.y;

        //float distance = Vector3.Distance(new Vector3(mPos.x, 0, mPos.z), new Vector3(tPos.x, 0, tPos.z));
        //movePos.y = jumpPosY;

    }